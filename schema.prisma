// Prisma schema soportando SQLite (dev) y PostgreSQL (prod)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = env("DATABASE_PROVIDER") // opcional: si no, Prisma infiere desde DATABASE_URL
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  ordersCreated Order[] @relation("OrdersCreated")
  ordersDelivered Order[] @relation("OrdersDelivered")
}

enum Role {
  admin
  bodeguero
  usuario
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
  products Product[]
}

model Product {
  id          Int       @id @default(autoincrement())
  sku         String    @unique
  name        String
  description String
  active      Boolean   @default(true)
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  locations   ProductLocation[]
  photos      ProductPhoto[]
  orderItems  OrderItem[]
}

model Location {
  id       Int    @id @default(autoincrement())
  tipo     LocationType
  pasillo  String
  rack     String
  seccion  String
  nota     String?
  products ProductLocation[]
  photos   ProductPhoto[]
}

enum LocationType {
  bodega
  piso
  trastienda
}

model ProductLocation {
  id         Int     @id @default(autoincrement())
  productId  Int
  locationId Int
  cantidad   Int     @default(0)
  product    Product @relation(fields: [productId], references: [id])
  location   Location @relation(fields: [locationId], references: [id])
}

model ProductPhoto {
  id         Int     @id @default(autoincrement())
  productId  Int
  locationId Int?
  path       String
  caption    String?
  product    Product @relation(fields: [productId], references: [id])
  location   Location? @relation(fields: [locationId], references: [id])
}

model Order {
  id           Int       @id @default(autoincrement())
  estado       OrderState @default(pendiente)
  solicitante  String
  horaRequerida DateTime?
  observaciones String?
  createdById   Int
  deliveredById Int?
  deliveredAt   DateTime?
  createdAt     DateTime @default(now())
  items         OrderItem[]
  createdBy     User      @relation("OrdersCreated", fields: [createdById], references: [id])
  deliveredBy   User?     @relation("OrdersDelivered", fields: [deliveredById], references: [id])
}

enum OrderState {
  pendiente
  entregada
}

model OrderItem {
  id            Int      @id @default(autoincrement())
  orderId       Int
  productId     Int?
  sku           String?
  nombreProducto String
  cantidad      Int
  nota          String?
  order         Order    @relation(fields: [orderId], references: [id])
  product       Product? @relation(fields: [productId], references: [id])
}

// Planograma (registro Ãºnico)
model Planogram {
  id          Int      @id @default(1)
  contenidoMd String
  updatedAt   DateTime @updatedAt
  updatedById Int?
  updatedBy   User?    @relation(fields: [updatedById], references: [id])
}

// Lecciones educativas
model Lesson {
  id          Int       @id @default(autoincrement())
  categoria   LessonCategory
  titulo      String
  descripcion String
  tipo        LessonType
  mediaPath   String?
  contenidoMd String
  publicado   Boolean   @default(true)
  createdAt   DateTime  @default(now())
}

enum LessonCategory {
  frutas_verduras
  general
}

enum LessonType {
  articulo
  video
}
